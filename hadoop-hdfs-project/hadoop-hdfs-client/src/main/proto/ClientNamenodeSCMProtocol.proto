/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * These .proto interfaces are private and unstable.
 * Please see http://wiki.apache.org/hadoop/Compatibility
 * for what changes are allowed for a *unstable* .proto interface.
 */

syntax = "proto2";
option java_package = "org.apache.hadoop.hdds.protocol.proto";
option java_outer_classname = "ClientNamenodeSCMProtocolProtos";
option java_generate_equals_and_hash = true;
package hadoop.hdfs;

import "Security.proto";
import "hdds.proto";
import "hdfs.proto";
import "acl.proto";

message HddsLocation {
    required hadoop.hdds.BlockID blockID = 1;
    required uint64 offset = 3;
    required uint64 length = 4;
    // indicated at which version this block gets created.
    optional uint64 createVersion = 5;
    optional hadoop.common.TokenProto token = 6;
    // Walk around to include pipeline info for client read/write
    // without talking to scm.
    // NOTE: the pipeline info may change after pipeline close.
    // So eventually, we will have to change back to call scm to
    // get the up to date pipeline information. This will need o3fs
    // provide not only a OM delegation token but also a SCM delegation token
    optional hadoop.hdds.Pipeline pipeline = 7;
}

message HddsLocationList {
    optional uint64 version = 1;
    repeated HddsLocation hddsLocations = 2;
}

message AllocateBlockRequest {
    required string src = 1;
    required string clientName = 2;
    optional HddsLocation previous = 3;
    optional hadoop.hdds.ExcludeListProto excludeList = 4;
    optional uint64 fileId = 5 [default = 0];  // default as a bogus id
    required uint64 clientID = 6;
}

message AllocateBlockResponse {
    optional HddsLocation hddsLocation = 2;
}


message HDDSLocatedBlocksProto {
    required uint64 fileLength = 1;
    repeated HddsLocation blocks = 2;
    required bool underConstruction = 3;
    optional HddsLocation lastBlock = 4;
    required bool isLastBlockComplete = 5;
    optional FileEncryptionInfoProto fileEncryptionInfo = 6;

    // Optional field for erasure coding
    optional ErasureCodingPolicyProto ecPolicy = 7;
}

message HDDSFileStatusProto {
    enum FileType {
        IS_DIR = 1;
        IS_FILE = 2;
        IS_SYMLINK = 3;
    }
    enum Flags {
        HAS_ACL   = 0x01; // has ACLs
        HAS_CRYPT = 0x02; // encrypted
        HAS_EC    = 0x04; // erasure coded
        SNAPSHOT_ENABLED    = 0x08; // SNAPSHOT ENABLED
    }
    required FileType fileType = 1;
    required bytes path = 2;          // local name of inode encoded java UTF8
    required uint64 length = 3;
    required FsPermissionProto permission = 4;
    required string owner = 5;
    required string group = 6;
    required uint64 modification_time = 7;
    required uint64 access_time = 8;

    // Optional fields for symlink
    optional bytes symlink = 9;             // if symlink, target encoded java UTF8

    // Optional fields for file
    optional uint32 block_replication = 10 [default = 0]; // only 16bits used
    optional uint64 blocksize = 11 [default = 0];
    optional HDDSLocatedBlocksProto locations = 12;  // suppled only if asked by client

    // Optional field for fileId
    optional uint64 fileId = 13 [default = 0]; // default as an invalid id
    optional int32 childrenNum = 14 [default = -1];
    // Optional field for file encryption
    optional FileEncryptionInfoProto fileEncryptionInfo = 15;

    optional uint32 storagePolicy = 16 [default = 0]; // block storage policy id

    // Optional field for erasure coding
    optional ErasureCodingPolicyProto ecPolicy = 17;

    // Set of flags
    optional uint32 flags = 18 [default = 0];
}

message GetHDDSLocatedFileInfoResponseProto {
    optional HDDSFileStatusProto fs = 1;
}

message CompleteHDDSFileRequestProto {
    required string src = 1;
    required string clientName = 2;
    optional HddsLocation last = 3;
    optional uint64 fileId = 4 [default = 0];  // default to GRANDFATHER_INODE_ID
}

message CompleteHDDSFileResponseProto {
    required bool result = 1;
}

/**
 * Directory listing
 */
message HDDSDirectoryListingProto {
    repeated HDDSFileStatusProto partialListing = 1;
    required uint32 remainingEntries  = 2;
}

message GetHDDSListingResponseProto {
    optional HDDSDirectoryListingProto dirList = 1;
}
